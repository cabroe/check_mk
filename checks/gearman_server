#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Description: Check to verify gearman server status
# Author: Phillipe Smith <phillipelnx@gmail.com>
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Output is taken from /usr/bin/gearman_top 
# <<<gearman_server>>>
#  check_results                                  1   0   0 
#  host                                           5   0   0 
#  hostgroup_check_mk                             5   0   1 
#  perfdata                                       1   0   0 
#  service                                        5   0   0 
#  services                                       0   1   0 
#  worker_host.example.com                        1   0   0


# Threshold levels
gearman_server_jobs_default_levels     = (10, 100)
gearman_server_worker_default_levels   = (1, 1)

factory_settings['gearman_server_default_levels'] = {
    'jobs'    : gearman_server_jobs_default_levels, 
    'worker'  : gearman_server_worker_default_levels,
}

def inventory_gearman_server(info):
    inventory = []
    for item in info:
        inventory.append((None, {}))
    return inventory


def check_gearman_server(item, params, info):
    infotext = ''
    perfdata = []
    status = 0
    jobs_running = 0
    total_jobs_waiting = 0

    if not info:
        return (2, 'Gearman Server is not responding.')

    for value in info:
        if len(value) is not 4:
            return (3, "Invalid output from plugin")
        
        queue = value[0]
        worker_available = saveint(value[1])
        jobs_running += int(value[3])
        jobs_waiting = saveint(value[2])
        total_jobs_waiting += jobs_waiting

        # Warning and Critical values
        if queue in params:
            jobs_warn, jobs_crit, worker_warn, worker_crit = params[queue]
        else:
            worker_warn, worker_crit = params['worker']
            jobs_warn, jobs_crit = params['jobs']

        # Perfdata definitions
        perfdata.append((queue+'_waiting', jobs_waiting, worker_warn, worker_crit, jobs_warn, jobs_crit, '', ''))
        perfdata.append((queue+'_running', jobs_running, worker_warn, worker_crit, jobs_warn, jobs_crit, '', ''))
        perfdata.append((queue+'_worker', worker_available))

        if 'worker_' in queue or 'check_result' in queue:
            if worker_available < 1:
                status = 2
                infotext += 'Queue %s(!!) has no worker. ' % (queue)
        else:
            if worker_available <= worker_crit:
                status = 2
                infotext += 'Queue %s(!!) has %d workers. ' % (queue, worker_available)
            elif worker_available <= worker_warn:
                if status is not 2: 
                    status = 1 
                    infotext += 'Queue %s(!) has %d workers. ' % (queue, worker_available)
            elif jobs_waiting > jobs_crit:
                status = 2
                infotext += 'Queue %s(!!) has %d waiting jobs. ' % (queue, jobs_waiting)
            elif jobs_waiting > jobs_warn:
                if status is not 2: 
                    status = 1 
                    infotext += 'Queue %s(!) has %d waiting jobs. ' % (queue, jobs_waiting)
    if status == 0:
        infotext = '%d jobs running and %d jobs waiting. ' % (jobs_running, total_jobs_waiting)

    return (status, infotext, perfdata)

check_info['gearman_server'] = {
    'inventory_function'      : inventory_gearman_server,
    'check_function'          : check_gearman_server,
    'service_description'     : 'Gearman Server',
    'has_perfdata'            : True,
    "default_levels_variable" : "gearman_server_default_levels",
}


